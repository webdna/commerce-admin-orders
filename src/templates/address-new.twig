{% extends "commerce-admin-orders/_layouts/modal" %}
{% import "_includes/forms" as forms %}

{% block actionButton %}
	{% if fullPageForm %}

		<a href="{{cpUrl('commerce-admin-orders/orders/address?orderNumber='~order.number) }}" class="btn" style="margin-right:7px">{{ 'Cancel'|t('app') }}</a>

		<input type="submit" class="btn submit" value="{{ 'Continue'|t('app') }}">

	{% endif %}
{% endblock %}

{% block content %}

	<input type="hidden" name="action" value="commerce-admin-orders/orders/save-address">
	<input type="hidden" name="orderNumber" value="{{ order.number }}">
	{{ redirectInput(cpUrl()~'/commerce-admin-orders/orders/address?orderNumber={number}') }}

	<div class="flex" style="align-items: flex-start;">
		<div class="flex-grow">
			{% if settings.googleApiKey ?? false %}
				{{ forms.textField({
				id: 'addressLookup',
				name: 'addressLookup',
				label: 'Address Lookup',
				placeholder: 'Please start typing your address...',
			}) }}
			{% endif %}
		</div>
	</div>

	<div class="flex" style="align-items: flex-start;">
		<div class="flex-grow">
			{{ forms.textField({
				id: 'firstname',
				name: type~'[firstName]',
				label: 'Firstname',
				required: true,
				value: model.firstName ?? null,
				errors: model.getErrors('firstName'),
			}) }}
			{{ forms.textField({
				id: 'lastname',
				name: type~'[lastName]',
				label: 'Lastname',
				required: true,
				value: model.lastName ?? null,
				errors: model.getErrors('lastName'),
			}) }}
			{{ forms.textField({
				id: 'organization',
				name: type~'[organization]',
				label: 'Organization Name',
				required: false,
				value: model.organization ?? null,
				errors: model.getErrors('organization'),
			}) }}
			{{ forms.textField({
				id: 'organizationTaxId',
				name: type~'[organizationTaxId]',
				label: 'Organization Tax Number',
				required: false,
				value: model.organizationTaxId ?? null,
				errors: model.getErrors('organizationTaxId'),
			}) }}
			{% if model['phone'] is defined %}
				{{ forms.textField({
					id: 'phone',
					name: type~'[phone]',
					label: 'Phone',
					required: false,
					value: model.phone ?? null,
					errors: model.getErrors('phone'),
				}) }}
			{% endif %}
		</div>
		<div class="flex-grow">
			{{ forms.textField({
				id: 'addressLine1',
				name: type~'[addressLine1]',
				label: 'Address Line 1',
				required: true,
				value: model.addressLine1 ?? null,
				errors: model.getErrors('addressLine1'),
			}) }}
			{{ forms.textField({
				id: 'addressLine2',
				name: type~'[addressLine2]',
				label: 'Address Line 2',
				required: false,
				value: model.addressLine2 ?? null,
				errors: model.getErrors('addressLine2'),
			}) }}
			{{ forms.textField({
				id: 'locality',
				name: type~'[locality]',
				label: 'Locality',
				required: true,
				value: model.locality ?? null,
				errors: model.getErrors('locality'),
			}) }}
			{% set stateOptions = [] %}
			{% set states = craft.commerce.store.getStore().getAdministrativeAreasListByCountryCode() %}
			{% for item in states %}
				{% set stateOptions = stateOptions|merge(item) %}
			{% endfor %}
			{{ forms.selectField({
				label: 'State'|t('commerce'),
				id: 'administrativeArea',
				name: type~'[administrativeArea]',
				options: stateOptions,
				value: model.administrativeArea,
				errors: model.getErrors('administrativeArea'),
			}) }}
			{{ forms.textField({
				id: 'postalCode',
				name: type~'[postalCode]',
				label: 'Postal Code',
				required: true,
				value: model.postalCode ?? null,
				errors: model.getErrors('postalCode'),
			}) }}
			{{ forms.selectField({
				id: 'countryCode',
				name: type~'[countryCode]',
				label: 'Country',
				required: true,
				options: craft.commerce.getStore().store.getCountriesList(),
				value: model.countryCode ?? null,
				errors: model.getErrors('countryCode'),
			}) }}
		</div>
	</div>

	{% if settings.googleApiKey ?? false %}
		<script src='https://maps.googleapis.com/maps/api/js?key={{ settings.googleApiKey }}&libraries=places'></script>
	{% endif %}

	{% set states = craft.commerce.store.getStore().getAdministrativeAreasListByCountryCode() %}

	{% js %}

		{% if settings.googleApiKey ?? false %}
			if($('#addressLookup')[0]) {

				var autocomplete,
					$addressLookup = $('#addressLookup');

				autocomplete = new google.maps.places.Autocomplete($addressLookup[0], { types: ['geocode', 'establishment'] });
				autocomplete.setFields(['address_component']);
				autocomplete.addListener('place_changed', function() {
					var place = autocomplete.getPlace();
					console.log(place);

					var address = {
						address1: '',
						address2: '',
						city: '',
						stateName: '',
						zipCode: ''
					};
					var business = false;

					for (var i = 0; i < place.address_components.length; i++) {

						var addressType = place.address_components[i].types[0];

						if (addressType == 'subpremise') {
							address.address1 = place.address_components[i].long_name;
						}
						if (addressType == 'premise') {
							business = true;
							address.address1 += ' ' + place.address_components[i].long_name;
						}

						if (addressType == 'street_number') {
							if (business) {
								address.address2 = place.address_components[i].long_name;
							} else {
								address.address1 = place.address_components[i].long_name;
							}
						}
						if (addressType == 'route') {
							if (business) {
								address.address2 += ' ' + place.address_components[i].long_name;
							} else {
								address.address1 += ' ' + place.address_components[i].long_name;
							}
						}

						if (addressType == 'locality') {
							if (!business) {
								address.address2 = place.address_components[i].long_name;
							}
						}

						if (addressType == 'postal_town') {
							address.city = place.address_components[i].long_name;
						}
						if (addressType == 'administrative_area_level_2') {
							var	selectize = $states[0].selectize;

							if(selectize.search(place.address_components[i].long_name).items[0]) {
								selectize.setValue(selectize.search(place.address_components[i].long_name).items[0].id);
							} else {
								{# add new state if not in dropdown #}
								selectize.addOption({
									id:place.address_components[i].long_name,
									name:place.address_components[i].long_name
								});
								selectize.refreshOptions();
								selectize.addItem(place.address_components[i].long_name)
							}
						}
						if (addressType == 'postal_code') {
							address.zipCode = place.address_components[i].long_name;
						}
						if (addressType == 'country') {
							address.country = place.address_components[i].long_name;
						}
					}

					for (var property in address) {
						$('#' + property).val(address[property]);
					}

					//country
					$('#country option').each(function(i) {
						if (this.text == address.country) {
							$('#country')[0].selectedIndex = i;
						}
					});
				});
			}
		{% endif %}
	{% endjs %}

{% endblock %}

{% do view.registerAssetBundle("craft\\commerce\\web\\assets\\commercecp\\CommerceCpAsset") %}
